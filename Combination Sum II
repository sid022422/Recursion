Given a collection of candidate numbers (candidates) and a target number (target), find all unique combinations in candidates where the candidate numbers sum to target.

Each number in candidates may only be used once in the combination.

Note: The solution set must not contain duplicate combinations.
(INSTEAD OF SET DONE USING RECURSION)

void rec(int i,int target,vector<int>& candidates,vector<int>&v,vector<vector<int>>&ans){
     
         if(target==0){
                 ans.push_back(v);
                 return;
            }
             
        for(int j=i;j<candidates.size();j++){
            if(j>i && candidates[j]==candidates[j-1])continue;
            if(candidates[j]>target)break;
            v.push_back(candidates[j]);
            rec(j+1,target-candidates[j],candidates,v,ans);
            v.pop_back();
        }       

    }
    vector<vector<int>> combinationSum2(vector<int>& candidates, int target) {
        
        vector<vector<int>>ans;
        vector<int>v;
        sort(candidates.begin(),candidates.end());
        rec(0,target,candidates,v,ans);      
        return ans;
    }
